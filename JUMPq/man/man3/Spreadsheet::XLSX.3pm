.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Spreadsheet::XLSX 3"
.TH Spreadsheet::XLSX 3 "2010-05-16" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Spreadsheet::XLSX \- Perl extension for reading MS Excel 2007 files;
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Text::Iconv;
\& my $converter = Text::Iconv \-> new ("utf\-8", "windows\-1251");
\& 
\& # Text::Iconv is not really required.
\& # This can be any object with the convert method. Or nothing.
\&
\& use Spreadsheet::XLSX;
\& 
\& my $excel = Spreadsheet::XLSX \-> new (\*(Aqtest.xlsx\*(Aq, $converter);
\& 
\& foreach my $sheet (@{$excel \-> {Worksheet}}) {
\& 
\&        printf("Sheet: %s\en", $sheet\->{Name});
\&        
\&        $sheet \-> {MaxRow} ||= $sheet \-> {MinRow};
\&        
\&         foreach my $row ($sheet \-> {MinRow} .. $sheet \-> {MaxRow}) {
\&         
\&                $sheet \-> {MaxCol} ||= $sheet \-> {MinCol};
\&                
\&                foreach my $col ($sheet \-> {MinCol} ..  $sheet \-> {MaxCol}) {
\&                
\&                        my $cell = $sheet \-> {Cells} [$row] [$col];
\& 
\&                        if ($cell) {
\&                            printf("( %s , %s ) => %s\en", $row, $col, $cell \-> {Val});
\&                        }
\& 
\&                }
\& 
\&        }
\& 
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a (quick and dirty) emulation of Spreadsheet::ParseExcel for 
Excel 2007 (.xlsx) file format.  It supports styles and many of Excel's quirks, 
but not all.  It populates the classes from Spreadsheet::ParseExcel for interoperability; 
including Workbook, Worksheet, and Cell.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Text::CSV_XS, Text::CSV_PP" 2
.IX Item "Text::CSV_XS, Text::CSV_PP"
http://search.cpan.org/~hmbrand/
.Sp
A pure perl version is available on http://search.cpan.org/~makamaka/
.IP "Spreadsheet::ParseExcel" 2
.IX Item "Spreadsheet::ParseExcel"
http://search.cpan.org/~kwitknr/
.IP "Spreadsheet::ReadSXC" 2
.IX Item "Spreadsheet::ReadSXC"
http://search.cpan.org/~terhechte/
.IP "Spreadsheet::BasicRead" 2
.IX Item "Spreadsheet::BasicRead"
http://search.cpan.org/~gng/ for xlscat likewise functionality (Excel only)
.IP "Spreadsheet::ConvertAA" 2
.IX Item "Spreadsheet::ConvertAA"
http://search.cpan.org/~nkh/ for an alternative set of cell2cr () /
cr2cell () pair
.IP "Spreadsheet::Perl" 2
.IX Item "Spreadsheet::Perl"
http://search.cpan.org/~nkh/ offers a Pure Perl implementation of a
spreadsheet engine. Users that want this format to be supported in
Spreadsheet::Read are hereby motivated to offer patches. It's not high
on my todo-list.
.IP "xls2csv" 2
.IX Item "xls2csv"
http://search.cpan.org/~ken/ offers an alternative for my \f(CW\*(C`xlscat \-c\*(C'\fR,
in the xls2csv tool, but this tool focusses on character encoding
transparency, and requires some other modules.
.IP "Spreadsheet::Read" 2
.IX Item "Spreadsheet::Read"
http://search.cpan.org/~hmbrand/ read the data from a spreadsheet (interface 
module)
.SH "AUTHOR"
.IX Header "AUTHOR"
Dmitry Ovsyanko, <do@eludia.ru<gt>, http://eludia.ru/wiki/
.PP
Patches by:
.PP
.Vb 9
\&        Steve Simms
\&        Joerg Meltzer
\&        Loreyna Yeung   
\&        Rob Polocz
\&        Gregor Herrmann
\&        H.Merijn Brand
\&        endacoe
\&        Pat Mariani
\&        Sergey Pushkin
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.Vb 1
\&        Thanks to TrackVia Inc. (http://www.trackvia.com) for paying for Rob Polocz working time.
.Ve
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008 by Dmitry Ovsyanko
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
